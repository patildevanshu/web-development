const multer = require('multer');
const path = require('path');
const crypto = require('crypto');
// const aws = require('aws-sdk');
const { CloudinaryStorage } = require("multer-storage-cloudinary")
const cloudinary = require("cloudinary").v2;
require("dotenv").config();
// const s3 = new aws.S3({
//   accessKeyId: process.env.AWS_ACCESS_KEY_ID,
//   secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
//   region: process.env.AWS_REGION,
// });

// Multer setup for file uploads
// const storage = multer.memoryStorage();
// const upload = multer({ storage: storage });

// Function to upload a file to S3 and return the URL
// async function uploadToS3WithHash(file, hashedFileName) {
//   return new Promise((resolve, reject) => {
//     const params = {
//       Bucket: process.env.S3_BUCKET_NAME,
//       Key: `tip/${hashedFileName}`,
//       Body: file.buffer,
//       ContentType: file.mimetype,
//     };

//     s3.upload(params, (error, data) => {
//       if (error) {
//         console.log(error)
//         reject(error);
//       } else {
//         resolve(data.Location);
//       }
//     });
//   });
// }


// Configure Cloudinary

cloudinary.config({
      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET
});

// Configure multer storage for Cloudinary
const storage = new CloudinaryStorage({
      cloudinary: cloudinary,
      params: async (req, file) => {
            const timestamp = Date.now().toString();
            const hashedFileName = generateHashedFileNames(file.originalname, timestamp);
            return {
                  key: `mitra${hashedFileName}`,
                  Body: file.buffer,
                  ContentType: file.mimetype
            };
      }
});

// Initialize multer instance with Cloudinary storage
const uploads = multer({ storage: storage });
// function uploadToS3WithHash(file) {
//       return new Promise((resolve, reject) => {
//             cloudinary.uploader.upload(
//                   file.path,
//                   console.log("69", file),
//                   (error, result) => {
//                         if (error) {
//                               console.log("71", error)
//                               reject(error);
//                         } else {
//                               console.log("74", result)
//                               resolve(result.secure_url);
//                         }
//                   }
//             )
//             // file.end(file.buffer);
//       });
// }
function uploadToCloudinary(file) {
      return new Promise((resolve, reject) => {
            cloudinary.uploader.upload(
                  file.path,
                  (error, result) => {
                        if (error) {
                              console.log("Error uploading to Cloudinary:", error);
                              reject(error);
                        } else {
                              resolve(result.secure_url);
                        }
                  }
            );
      });
}


// Function to generate a hashed file name
function generateHashedFileNames(fileName, timestamp) {
      const hash = crypto.createHash('sha256');
      hash.update(fileName + timestamp);

      const hashedFileName = hash.digest('hex');
      const fileExtension = path.extname(fileName);
      const finalFileName = hashedFileName + fileExtension;

      return finalFileName;
}

module.exports = {
      uploads,
      generateHashedFileNames,
      uploadToCloudinary, // Update the exported function name
};

